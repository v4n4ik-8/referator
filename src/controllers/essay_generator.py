from typing import List
import os
from PySide6.QtCore import QObject, Signal, QThread
from models import Essay, Section, APIClient
from models.api_client import APIError
from utils import DocumentFormatter

class GeneratorWorker(QThread):
    progress = Signal(int)
    status = Signal(str)
    finished = Signal(bool, str)
    essay_completed = Signal(str)  # –°–∏–≥–Ω–∞–ª –æ –≥–æ—Ç–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞—Ç–µ
    
    def __init__(self, topics: List[str], num_chapters: int, symbols_per_chapter: int, output_path: str, language: str = "–†—É—Å—Å–∫–∏–π"):
        super().__init__()
        self.topics = topics
        self.num_chapters = num_chapters
        self.symbols_per_chapter = symbols_per_chapter
        self.output_path = output_path
        self.language = language
        self.api_client = APIClient()
        self.formatter = DocumentFormatter()
        self.stop_generation = False
        
    def run(self):
        try:
            total_steps = len(self.topics) * (self.num_chapters + 1)  # +1 –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è
            current_step = 0
            
            for topic in self.topics:
                if self.stop_generation:
                    self.status.emit("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    self.finished.emit(False, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return

                self.status.emit(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {topic}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞
                structure = self.api_client.get_essay_structure(topic, self.num_chapters, self.language)
                if not structure:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ–º—ã: {topic}")
                
                # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ —Å–µ–∫—Ü–∏–∏
                section_titles = [line.strip() for line in structure.split('\n') if line.strip()]
                sections = []
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
                for title in section_titles:
                    if self.stop_generation:
                        self.status.emit("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                        self.finished.emit(False, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        return

                    self.status.emit(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞: {title}")
                    
                    content = self.api_client.generate_section_content(
                        topic, 
                        title,
                        self.symbols_per_chapter,
                        self.language
                    )
                    
                    if not content:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞: {title}")
                    
                    is_chapter = "–ì–ª–∞–≤–∞" in title
                    sections.append(Section(title=title, content=content, is_chapter=is_chapter))
                    
                    current_step += 1
                    progress = (current_step * 100) // total_steps
                    self.progress.emit(progress)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ—Ñ–µ—Ä–∞—Ç–∞
                essay = Essay(
                    topic=topic,
                    sections=sections,
                    num_chapters=self.num_chapters,
                    symbols_per_chapter=self.symbols_per_chapter
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if not essay.validate():
                    raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –¥–ª—è —Ç–µ–º—ã: {topic}")
                
                # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc = self.formatter.create_document(essay)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å
                safe_filename = "".join(x for x in topic if x.isalnum() or x in (' ', '-', '_')).strip()
                safe_filename = f"–†–µ—Ñ–µ—Ä–∞—Ç - {safe_filename}.docx"
                full_path = os.path.join(self.output_path, safe_filename)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc.save(full_path)
                
                # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –≥–æ—Ç–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞—Ç–µ
                self.essay_completed.emit(topic)
            
            self.finished.emit(True, "–†–µ—Ñ–µ—Ä–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ")
            
        except APIError as e:
            self.status.emit(e.user_message)
            self.finished.emit(False, e.user_message)
        except Exception as e:
            error_message = (
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòî\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–º—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
            )
            self.status.emit(error_message)
            self.finished.emit(False, error_message)

class EssayGeneratorController(QObject):
    progress = Signal(int)
    status = Signal(str)
    finished = Signal(bool, str)
    essay_completed = Signal(str)  # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–∞–ª—å—à–µ
    
    def __init__(self):
        super().__init__()
        self.worker = None
    
    def generate_essays(self, topics: List[str], num_chapters: int, symbols_per_chapter: int, output_path: str, language: str = "–†—É—Å—Å–∫–∏–π") -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º"""
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º worker
        self.worker = GeneratorWorker(topics, num_chapters, symbols_per_chapter, output_path, language)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.worker.progress.connect(self.progress.emit)
        self.worker.status.connect(self.status.emit)
        self.worker.finished.connect(self.finished.emit)
        self.worker.essay_completed.connect(self.essay_completed.emit)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.worker.start() 